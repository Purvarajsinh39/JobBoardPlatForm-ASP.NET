@model List<JobBoardPlatform.Models.Notification>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Notifications - JobBoard</title>

    <!-- Styles and Scripts -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>

    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            min-height: 100vh;
        }

        .glass-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        .notification-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 16px;
            margin-bottom: 1rem;
            border: 1px solid #e2e8f0;
        }

        .notification-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.15);
            border-color: #c7d2fe;
        }

        .notification-unread {
            background: linear-gradient(135deg, #fef3c7 0%, #fef7cd 100%);
            border-left: 4px solid #f59e0b;
        }

        .notification-read {
            background: white;
            border-left: 4px solid #e2e8f0;
        }

        .status-badge {
            transition: all 0.3s ease;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.75rem;
        }

        .pulse-dot {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .floating {
            animation: floating 3s ease-in-out infinite;
        }

        @@keyframes floating {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }

        .gradient-text {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 1.5rem;
            color: white;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
        }

        .empty-state {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border: 2px dashed #cbd5e1;
            transition: all 0.3s ease;
        }

        .empty-state:hover {
            border-color: #f59e0b;
            background: linear-gradient(135deg, #fef3c7 0%, #fef7cd 100%);
        }

        .notification-item {
            animation: slideInUp 0.5s ease-out;
        }

        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-text {
            line-height: 1.6;
            word-wrap: break-word;
        }

        .time-badge {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header-gradient {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        /* Fix layout issues */
        .main-container {
            margin-top: 2rem;
        }

        .content-wrapper {
            max-width: 1200px;
            margin: 0 auto;
        }

        .text-amber-50 {
            color: rgba(255, 251, 235, 0.9);
        }

        .text-amber-100 {
            color: rgba(254, 243, 199, 0.9);
        }
    </style>
</head>
<body class="gradient-bg">
    <!-- Main Content Area -->
    <div class="main-container">
        <div class="content-wrapper px-4 sm:px-6 lg:px-8">
            <!-- Header Section -->
            <div class="text-center mb-12" data-aos="fade-up">
                <div class="floating inline-flex items-center justify-center w-20 h-20 bg-amber-500 bg-opacity-20 rounded-full mb-6 backdrop-blur-sm">
                    <i data-feather="bell" class="w-10 h-10 text-amber-400"></i>
                </div>
                <h1 class="text-4xl font-bold mb-4" style="color: #6D69CC;">My Notifications</h1>
                <p class="text-xl text-gray-600 max-w-2xl mx-auto">
                    Stay updated with your latest activities and important updates
                </p>
            </div>

            <!-- Stats Overview -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8" data-aos="fade-up" data-aos-delay="100">
                <div class="stat-card text-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="flex items-center justify-center space-x-3">
                        <div class="p-3 bg-amber-500 bg-opacity-20 rounded-xl">
                            <i data-feather="bell" class="w-6 h-6 text-amber-400"></i>
                        </div>
                        <div>
                            <div class="text-2xl font-bold">@Model.Count</div>
                            <div class="text-amber-100 text-sm">Total Notifications</div>
                        </div>
                    </div>
                </div>

                <div class="stat-card text-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="flex items-center justify-center space-x-3">
                        <div class="p-3 bg-green-500 bg-opacity-20 rounded-xl">
                            <i data-feather="eye" class="w-6 h-6 text-green-400"></i>
                        </div>
                        <div>
                            <div class="text-2xl font-bold">@Model.Count(n => n.IsRead)</div>
                            <div class="text-amber-100 text-sm">Read</div>
                        </div>
                    </div>
                </div>

                <div class="stat-card text-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="flex items-center justify-center space-x-3">
                        <div class="p-3 bg-red-500 bg-opacity-20 rounded-xl">
                            <i data-feather="alert-circle" class="w-6 h-6 text-red-400"></i>
                        </div>
                        <div>
                            <div class="text-2xl font-bold">@Model.Count(n => !n.IsRead)</div>
                            <div class="text-amber-100 text-sm" style="color:white;">Unread</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Notifications Container -->
            <div class="glass-card rounded-2xl overflow-hidden" data-aos="fade-up" data-aos-delay="200">
                <!-- Header -->
                <div class="header-gradient px-8 py-6" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="flex flex-col md:flex-row md:items-center md:justify-between">
                        <h2 class="text-2xl font-bold text-white mb-4 md:mb-0 flex items-center">
                            <i data-feather="list" class="w-6 h-6 mr-3"></i>
                            Recent Notifications
                        </h2>
                        <div class="flex items-center space-x-4">
                            <div class="time-badge px-4 py-2 rounded-full text-sm font-medium text-gray-700">
                                <i data-feather="clock" class="w-4 h-4 mr-2"></i>
                                Updated: @DateTime.Now.ToString("HH:mm")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notifications List -->
                <div class="p-6">
                    @if (Model.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var notification in Model)
                            {
                                <div class="notification-card notification-item @(notification.IsRead ? "notification-read" : "notification-unread") p-6">
                                    <div class="flex items-start justify-between">
                                        <!-- Left Content -->
                                        <div class="flex-1 min-w-0">
                                            <div class="flex items-start space-x-4">
                                                <!-- Status Indicator -->
                                                <div class="flex-shrink-0">
                                                    @if (!notification.IsRead)
                                                    {
                                                        <div class="pulse-dot w-3 h-3 bg-amber-500 rounded-full mt-2"></div>
                                                    }
                                                    else
                                                    {
                                                        <div class="w-3 h-3 bg-gray-400 rounded-full mt-2"></div>
                                                    }
                                                </div>

                                                <!-- Message Content -->
                                                <div class="flex-1 min-w-0">
                                                    <p class="message-text @(notification.IsRead ? "text-gray-700" : "text-gray-900 font-semibold") text-lg leading-relaxed">
                                                        @notification.Message
                                                    </p>

                                                    <!-- Time and Date -->
                                                    <div class="flex items-center space-x-4 mt-3">
                                                        <div class="flex items-center text-sm text-gray-500">
                                                            <i data-feather="calendar" class="w-4 h-4 mr-1"></i>
                                                            <span>@notification.CreatedAt.ToString("MMM dd, yyyy")</span>
                                                        </div>
                                                        <div class="flex items-center text-sm text-gray-500">
                                                            <i data-feather="clock" class="w-4 h-4 mr-1"></i>
                                                            <span>@notification.CreatedAt.ToString("HH:mm")</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Right Content - Status Badge -->
                                        <div class="flex-shrink-0 ml-4">
                                            @if (notification.IsRead)
                                            {
                                                <span class="status-badge inline-flex items-center px-4 py-2 rounded-full text-sm bg-green-100 text-green-800 border border-green-200">
                                                    <i data-feather="check-circle" class="w-4 h-4 mr-2"></i>
                                                    READ
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="status-badge inline-flex items-center px-4 py-2 rounded-full text-sm bg-amber-100 text-amber-800 border border-amber-200">
                                                    <i data-feather="alert-circle" class="w-4 h-4 mr-2 pulse-dot"></i>
                                                    UNREAD
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- Empty State -->
                        <div class="empty-state rounded-2xl p-12 text-center">
                            <div class="floating inline-flex items-center justify-center w-24 h-24 bg-amber-50 rounded-full shadow-lg mb-6">
                                <i data-feather="bell-off" class="w-12 h-12 text-amber-400"></i>
                            </div>
                            <h3 class="text-2xl font-semibold text-gray-700 mb-3">No Notifications Yet</h3>
                            <p class="text-gray-500 mb-6 max-w-md mx-auto">
                                When you receive notifications about your job applications and important updates,
                                they'll appear here to keep you informed.
                            </p>
                            <div class="flex flex-col sm:flex-row gap-4 justify-center">
                                <a href="@Url.Action("Dashboard", "JobSeeker")"
                                   class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg font-semibold hover:from-amber-600 hover:to-amber-700 transition-all duration-300">
                                    <i data-feather="search" class="w-4 h-4 mr-2"></i>
                                    Browse Jobs
                                </a>
                                <a href="@Url.Action("MyApplications", "JobSeeker")"
                                   class="inline-flex items-center px-6 py-3 bg-white text-gray-700 rounded-lg font-semibold border border-gray-300 hover:border-gray-400 hover:bg-gray-50 transition-all duration-300">
                                    <i data-feather="briefcase" class="w-4 h-4 mr-2"></i>
                                    View Applications
                                </a>
                            </div>
                        </div>
                    }
                </div>

                <!-- Footer -->
                @if (Model.Any())
                {
                    <div class="border-t border-gray-200 px-8 py-4 bg-gray-50">
                        <div class="flex flex-col md:flex-row md:items-center md:justify-between">
                            <p class="text-sm text-gray-600 mb-2 md:mb-0">
                                Showing <span class="font-semibold">@Model.Count</span>
                                notification@(Model.Count != 1 ? "s" : "")
                            </p>
                            <div class="flex items-center space-x-4">
                                @*<button onclick="markAllAsRead()"
                                        class="inline-flex items-center px-4 py-2 bg-amber-50 text-green-600 rounded-lg text-sm font-medium hover:bg-green-100 transition-colors">
                                    <i data-feather="check-square" class="w-4 h-4 mr-2"></i>
                                    Mark All as Read
                                </button>*@
                                <button onclick="clearAllNotifications()"
                                        class="inline-flex items-center px-4 py-2 bg-red-50 text-red-600 rounded-lg text-sm font-medium hover:bg-red-100 transition-colors">
                                    <i data-feather="trash-2" class="w-4 h-4 mr-2"></i>
                                    Clear All
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="https://unpkg.com/feather-icons"></script>
    <script>
        AOS.init({
            duration: 800,
            easing: 'ease-in-out',
            once: true
        });
        feather.replace();

        // Add interactive functionality
        function markAllAsRead() {
            const unreadNotifications = document.querySelectorAll('.notification-unread');
            unreadNotifications.forEach(notification => {
                notification.classList.remove('notification-unread');
                notification.classList.add('notification-read');

                const statusBadge = notification.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.innerHTML = '<i data-feather="check-circle" class="w-4 h-4 mr-2"></i>READ';
                    statusBadge.className = 'status-badge inline-flex items-center px-4 py-2 rounded-full text-sm bg-green-100 text-green-800 border border-green-200';
                }

                const pulseDot = notification.querySelector('.pulse-dot');
                if (pulseDot) {
                    pulseDot.className = 'w-3 h-3 bg-gray-400 rounded-full mt-2';
                }

                const messageText = notification.querySelector('.message-text');
                if (messageText) {
                    messageText.classList.remove('text-gray-900', 'font-semibold');
                    messageText.classList.add('text-gray-700');
                }
            });
            feather.replace();

            // Show success message
            showToast('All notifications marked as read', 'success');
        }

        function clearAllNotifications() {
            if (confirm('Are you sure you want to clear all notifications? This action cannot be undone.')) {
                const notificationsContainer = document.querySelector('.space-y-4');
                if (notificationsContainer) {
                    notificationsContainer.innerHTML = `
                            <div class="empty-state rounded-2xl p-12 text-center">
                                <div class="floating inline-flex items-center justify-center w-24 h-24 bg-amber-50 rounded-full shadow-lg mb-6">
                                    <i data-feather="bell-off" class="w-12 h-12 text-amber-400"></i>
                                </div>
                                <h3 class="text-2xl font-semibold text-gray-700 mb-3">No Notifications</h3>
                                <p class="text-gray-500 mb-6">All notifications have been cleared.</p>
                            </div>
                        `;
                    feather.replace();
                    showToast('All notifications cleared', 'success');
                }
            }
        }

        function showToast(message, type) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 p-4 rounded-xl text-white font-semibold shadow-lg z-50 ${type === 'success' ? 'bg-green-500' : 'bg-amber-500'
                }`;
            toast.innerHTML = `
                    <div class="flex items-center">
                        <i data-feather="${type === 'success' ? 'check-circle' : 'info'}" class="w-5 h-5 mr-2"></i>
                        <span>${message}</span>
                    </div>
                `;

            document.body.appendChild(toast);
            feather.replace();

            // Remove toast after 3 seconds
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Add click effects to notification cards
        document.querySelectorAll('.notification-card').forEach(card => {
            card.addEventListener('click', function () {
                if (this.classList.contains('notification-unread')) {
                    this.classList.remove('notification-unread');
                    this.classList.add('notification-read');

                    const statusBadge = this.querySelector('.status-badge');
                    if (statusBadge) {
                        statusBadge.innerHTML = '<i data-feather="check-circle" class="w-4 h-4 mr-2"></i>READ';
                        statusBadge.className = 'status-badge inline-flex items-center px-4 py-2 rounded-full text-sm bg-green-100 text-green-800 border border-green-200';
                    }

                    const pulseDot = this.querySelector('.pulse-dot');
                    if (pulseDot) {
                        pulseDot.className = 'w-3 h-3 bg-gray-400 rounded-full mt-2';
                    }

                    const messageText = this.querySelector('.message-text');
                    if (messageText) {
                        messageText.classList.remove('text-gray-900', 'font-semibold');
                        messageText.classList.add('text-gray-700');
                    }

                    feather.replace();
                }
            });
        });
    </script>
</body>
</html>